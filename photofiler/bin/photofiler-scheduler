#!/usr/bin/python3

import os, sys
import xml.etree.ElementTree as ET

# Set config file locations
schedule_config_file = '/etc/photofiler/schedule.xml'

# Check if first argument has been given
length = len(sys.argv)

if length < 2:
	print("No command given!")
	exit(1)

# Removes any existing reference to photofiler from crontab
def remove_from_crontab():
	os.system('sed -i "/photofiler/d" /var/spool/cron/crontabs/root')
	os.system('killall crond')
	os.system('crond')

# Adds a schedule for photofiler to crontab
def add_to_crontab(hour):
	os.system("echo \"0 " + hour + " * * * photofiler\" >> /var/spool/cron/crontabs/root")
	os.system('killall crond')
	os.system('crond')

# Returns 1 if config is set active in config file, 0 otherwise
def read_config(schedule_config_file):
		
	# Parse XML data
	tree = ET.parse(schedule_config_file)
	root = tree.getroot()

	# Read values
	active = 0
	for active_node in root.findall('active'):
		active = active_node.text
		break
	
	hour = 0
	for hour_node in root.findall('hour'):
		hour = hour_node.text

	return active, hour

# Define command handlers
def start_handler():
	# Add cronjob if necessary 
	active, hour = read_config('/etc/photofiler/schedule.xml')
	if active:
		add_to_crontab(hour)

def stop_handler():
	# Remove cronjob
	remove_from_crontab()

def restart_handler():
	# Remove cronjob and re-add if necessary
	stop_handler()
	start_handler()

def default_handler():
	print("Command not recognized!")


# Define available commands
commands = {
	'start': start_handler,
	'stop': stop_handler,
	'restart': restart_handler
}

cmd = sys.argv[1]

# Execute command
if cmd in commands:
	commands[cmd]()
	exit(0)
else:
	default_handler()
	exit(1)
	